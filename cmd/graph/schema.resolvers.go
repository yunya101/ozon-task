package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/yunya101/ozon-task/internal/model"
)

func (r *commentResolver) Parent(ctx context.Context, obj *model.Comment) (int, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

func (r *mutationResolver) AddComment(ctx context.Context, postID int, parent int, text string, author int) (*model.Comment, error) {
	comment := &model.Comment{
		PostID:   int64(postID),
		ParentID: int64(parent),
		Text:     text,
		Author:   int64(author),
	}

	if err := r.commentService.AddComment(comment); err != nil {
		return nil, err
	}

	r.mu.Lock()

	if ch, ok := r.subs[int64(postID)]; ok {
		ch <- comment
	}

	r.mu.Unlock()

	return comment, nil
}

func (r *postResolver) CountComments(ctx context.Context, obj *model.Post) (int32, error) {
	panic(fmt.Errorf("not implemented: CountComments - countComments"))
}

func (r *queryResolver) Lastest(ctx context.Context, page int) ([]*model.Post, error) {

	posts, err := r.postService.GetLastestPosts(page)
	if err != nil {
		return nil, err
	}

	return posts, nil
}

func (r *queryResolver) GetPostByID(ctx context.Context, postID int) (*model.Post, error) {
	post, err := r.postService.GetPostById(int64(postID))
	if err != nil {
		return nil, err
	}

	return post, nil
}

func (r *queryResolver) GetSubsPosts(ctx context.Context, userID int) ([]*model.Post, error) {
	posts, err := r.postService.GetSubsPostsByUserId(int64(userID))

	if err != nil {
		return nil, err
	}

	return posts, err
}

func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID int) (<-chan *model.Comment, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	ch := make(chan *model.Comment, 1)
	r.subs[int64(postID)] = ch

	go func() {
		<-ctx.Done()
		r.mu.Lock()
		delete(r.subs, int64(postID))
		close(ch)
		r.mu.Unlock()
	}()

	return ch, nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
